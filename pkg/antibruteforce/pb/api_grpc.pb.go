// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AntiBruteforceClient is the client API for AntiBruteforce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntiBruteforceClient interface {
	BlackListExtend(ctx context.Context, in *SubnetAddress, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BlackListRemove(ctx context.Context, in *SubnetAddress, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WhiteListAdd(ctx context.Context, in *SubnetAddress, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WhiteListRemove(ctx context.Context, in *SubnetAddress, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ClearLists(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AuthCheck(ctx context.Context, in *AuthCheckRequest, opts ...grpc.CallOption) (*AuthCheckResponse, error)
}

type antiBruteforceClient struct {
	cc grpc.ClientConnInterface
}

func NewAntiBruteforceClient(cc grpc.ClientConnInterface) AntiBruteforceClient {
	return &antiBruteforceClient{cc}
}

func (c *antiBruteforceClient) BlackListExtend(ctx context.Context, in *SubnetAddress, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/AntiBruteforce/BlackListAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) BlackListRemove(ctx context.Context, in *SubnetAddress, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/AntiBruteforce/BlackListRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) WhiteListAdd(ctx context.Context, in *SubnetAddress, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/AntiBruteforce/WhiteListAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) WhiteListRemove(ctx context.Context, in *SubnetAddress, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/AntiBruteforce/WhiteListRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) ClearLists(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/AntiBruteforce/ClearLists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) AuthCheck(ctx context.Context, in *AuthCheckRequest, opts ...grpc.CallOption) (*AuthCheckResponse, error) {
	out := new(AuthCheckResponse)
	err := c.cc.Invoke(ctx, "/AntiBruteforce/AuthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntiBruteforceServer is the server API for AntiBruteforce service.
// All implementations must embed UnimplementedAntiBruteforceServer
// for forward compatibility
type AntiBruteforceServer interface {
	BlackListExtend(context.Context, *SubnetAddress) (*emptypb.Empty, error)
	BlackListRemove(context.Context, *SubnetAddress) (*emptypb.Empty, error)
	WhiteListAdd(context.Context, *SubnetAddress) (*emptypb.Empty, error)
	WhiteListRemove(context.Context, *SubnetAddress) (*emptypb.Empty, error)
	ClearLists(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	AuthCheck(context.Context, *AuthCheckRequest) (*AuthCheckResponse, error)
	mustEmbedUnimplementedAntiBruteforceServer()
}

// UnimplementedAntiBruteforceServer must be embedded to have forward compatible implementations.
type UnimplementedAntiBruteforceServer struct {
}

func (UnimplementedAntiBruteforceServer) BlackListExtend(context.Context, *SubnetAddress) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlackListAdd not implemented")
}
func (UnimplementedAntiBruteforceServer) BlackListRemove(context.Context, *SubnetAddress) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlackListRemove not implemented")
}
func (UnimplementedAntiBruteforceServer) WhiteListAdd(context.Context, *SubnetAddress) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhiteListAdd not implemented")
}
func (UnimplementedAntiBruteforceServer) WhiteListRemove(context.Context, *SubnetAddress) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhiteListRemove not implemented")
}
func (UnimplementedAntiBruteforceServer) ClearLists(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearLists not implemented")
}
func (UnimplementedAntiBruteforceServer) AuthCheck(context.Context, *AuthCheckRequest) (*AuthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCheck not implemented")
}
func (UnimplementedAntiBruteforceServer) mustEmbedUnimplementedAntiBruteforceServer() {}

// UnsafeAntiBruteforceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntiBruteforceServer will
// result in compilation errors.
type UnsafeAntiBruteforceServer interface {
	mustEmbedUnimplementedAntiBruteforceServer()
}

func RegisterAntiBruteforceServer(s grpc.ServiceRegistrar, srv AntiBruteforceServer) {
	s.RegisterService(&AntiBruteforce_ServiceDesc, srv)
}

func _AntiBruteforce_BlackListExtend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).BlackListExtend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AntiBruteforce/BlackListAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).BlackListExtend(ctx, req.(*SubnetAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_BlackListRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).BlackListRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AntiBruteforce/BlackListRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).BlackListRemove(ctx, req.(*SubnetAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_WhiteListAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).WhiteListAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AntiBruteforce/WhiteListAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).WhiteListAdd(ctx, req.(*SubnetAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_WhiteListRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).WhiteListRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AntiBruteforce/WhiteListRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).WhiteListRemove(ctx, req.(*SubnetAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_ClearLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).ClearLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AntiBruteforce/ClearLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).ClearLists(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_AuthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).AuthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AntiBruteforce/AuthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).AuthCheck(ctx, req.(*AuthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AntiBruteforce_ServiceDesc is the grpc.ServiceDesc for AntiBruteforce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntiBruteforce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AntiBruteforce",
	HandlerType: (*AntiBruteforceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BlackListAdd",
			Handler:    _AntiBruteforce_BlackListExtend_Handler,
		},
		{
			MethodName: "BlackListRemove",
			Handler:    _AntiBruteforce_BlackListRemove_Handler,
		},
		{
			MethodName: "WhiteListAdd",
			Handler:    _AntiBruteforce_WhiteListAdd_Handler,
		},
		{
			MethodName: "WhiteListRemove",
			Handler:    _AntiBruteforce_WhiteListRemove_Handler,
		},
		{
			MethodName: "ClearLists",
			Handler:    _AntiBruteforce_ClearLists_Handler,
		},
		{
			MethodName: "AuthCheck",
			Handler:    _AntiBruteforce_AuthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
